def run_test(file)
  dir = file.match(%r[^[^/]+])[0]
  result = `go test -v ./#{file} #{Dir["./#{dir}/*.go"].reject{|p| p.end_with? '_test.go'}.join(' ')}`
  puts result.gsub(/\bRUN\b/, "\e[1;93mRUN\e[0m").gsub(/\bPASS\b/, "\e[1;92mPASS\e[0m").gsub(/\bFAIL\b/, "\e[1;91mFAIL\e[0m")
end

def sep(f)
  puts "\033[93m#{Time.now}: #{File.basename f}\033[0m"
end

guard :shell do
  watch /\.go$/ do |m|
    sep m[0]
    case m[0]
    when /_test\.go$/
      run_test m[0]
    when /grammar.go$/
      run_test 'syntax/parser_test.go'
    else
      system "make build"
      f = m[0].to_s
      test_file = "#{f[0, f.length-3]}_test.go"
      if File.exists? test_file
        sep test_file
        run_test test_file
      end
    end
  end

  watch /\.c$/ do |m|
    sep m[0]
    system "make build"
  end

  watch /\.go\.y$/ do |m|
    sep m[0]
    system "make build"
  end

  watch /syntax\/testdata\/.*\.ast$/ do |m|
    sep m[0]
    run_test 'syntax/grammar_test.go'
  end
  watch /syntax\/testdata\/.*\.tokens$/ do |m|
    sep m[0]
    run_test 'syntax/lexer_test.go'
  end
  watch /syntax\/testdata\/import\/.*\.dcs$/ do |m|
    sep m[0]
    run_test 'syntax/import_test.go'
  end
end
